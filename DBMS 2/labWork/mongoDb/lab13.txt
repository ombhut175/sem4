Part – A (Use collection “Stock” created in Lab-12)
1. Create an index on the company field in the stocks collection.
    db.Stock.createIndex({company : 1})

2. Create a compound index on the sector and sales fields in the stocks collection.
    db.Stock.createIndex({sector : 1,sales :1})

3. List all the indexes created on the stocks collection.
    db.Stock.getIndexes()
    
4. Drop an existing index on the company field from the stocks collection.
    db.Stock.dropIndex({company : 1})

5. Use a cursor to retrieve and iterate over documents in the stocks collection, displaying each document.

    var stockCursor = db.Stock.find();

    while(stockCursor.hasNext()){
    printjson(stockCursor.next())
    }

6. Limit the number of documents returned by a cursor to the first 3 documents in the stocks collection.

    var stockCursor = db.Stock.find().limit(3);

7. Sort the documents returned by a cursor in descending order based on the sales field.
    var stockCursor = db.Stock.find().sort({sales:1});

8. Skip the first 2 documents in the result set and return the next documents using the cursor.
    var stockCursor = db.Stock.find().skip(2)

9. Convert the cursor to an array and return all documents from the stocks collection.
    var stockCursor = db.Stock.find().toArray()

10. Create a collection named "Companies" with schema validation to ensure that each document must
contains a company field (string) and a sector field (string).
    db.createCollection("Companies", {
        validator: {
            $jsonSchema: {
            bsonType: "object",
            required: [ "company", "sector" ],
            properties: {
                company: {bsonType: "string"},
                sector: {bsonType: "string"}
            }}}})

Part – B
1. Create a collection named "Scripts" with validation for fields like eps, pe, and roe to ensure that they
are numbers and required/compulsory fields.
2. Create a collection named "Products" where each product has an embedded document for
manufacturer details and a multivalued field for categories that stores an array of category names the
product belongs to.
 manufacturer details: The manufacturer will be an embedded document with fields like name,
country, and establishedYear.
 categories: The categories will be an array field that holds multiple values. (i.e. Electronics,
Mobile, Smart Devices).

    db.createCollection("Products", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["name", "manufacturer", "categories"],
      properties: {
        name: {
          bsonType: "string",
          description: "Product name must be a string and is required."
        },
        manufacturer: {
          bsonType: "object",
          required: ["name", "country", "establishedYear"],
          properties: {
            name: {
              bsonType: "string",
              description: "Manufacturer name must be a string."
            },
            country: {
              bsonType: "string",
              description: "Country must be a string."
            },
            establishedYear: {
              bsonType: "int",
              minimum: 1800,
              description: "Established year must be an integer and at least 1800."
            }
          }
        },
        categories: {
          bsonType: "array",
          minItems: 1,
          items: {
            bsonType: "string"
          },
          description: "Categories must be an array of at least one string."
        }
      }
    }
  }
});


Part – C
1. Create a collection named “financial_Reports” that requires revenue (a positive number) but allows
optional fields like expenses and netIncome (if provided, they should also be numbers).
    db.createCollection("financial_Reports", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["revenue"],  // revenue is required
      properties: {
        revenue: {
          bsonType: "double",  // Ensures it's a number (can also use "int" or "long")
          minimum: 0,          // Must be positive (>= 0)
          description: "Revenue must be a positive number and is required."
        },
        expenses: {
          bsonType: ["double", "int", "long"],  // Must be a number if provided
          description: "Expenses must be a number (optional)."
        },
        netIncome: {
          bsonType: ["double", "int", "long"],  // Must be a number if provided
          description: "Net income must be a number (optional)."
        }
      }
    }
  }
});

2. Create a collection named "Student" where each student has name and address are embedded document and mobilenumber and emailaddress are multivalued field that stores an array of values.

    db.createCollection("Student", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["name", "address", "mobileNumber", "emailAddress"],  
      properties: {
        name: {
          bsonType: "object",  
          required: ["firstName", "lastName"],
          properties: {
            firstName: { bsonType: "string", description: "First name must be a string and required." },
            lastName: { bsonType: "string", description: "Last name must be a string and required." }
          },
          description: "Name must be an embedded document containing firstName and lastName."
        },
        address: {
          bsonType: "object",
          required: ["street", "city", "state", "pincode"],
          properties: {
            street: { bsonType: "string", description: "Street must be a string." },
            city: { bsonType: "string", description: "City must be a string." },
            state: { bsonType: "string", description: "State must be a string." },
            pincode: { bsonType: "string", description: "Pincode must be a string." }
          },
          description: "Address must be an embedded document with street, city, state, and pincode."
        },
        mobileNumber: {
          bsonType: "array",
          minItems: 1,
          items: { bsonType: "string" },
          description: "Mobile number must be an array containing at least one string."
        },
        emailAddress: {
          bsonType: "array",
          minItems: 1,
          items: { bsonType: "string" },
          description: "Email address must be an array containing at least one string."
        }
      }
    }
  }
});
